name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
    schedule:
        - cron: '24 2 * * *'
    push:
        branches: ['main']
        # Publish sever tags as releases.
        tags: ['v*.*.*']
    pull_request:
        branches: ['main']

env:
    # Use docker.io for Docker Hub if empty
    REGISTRY: dtluat259
    # github.repository as <account>/<repo>
    IMAGE_NAME: dtluat259/restaurant-app

jobs:
    build:
        runs-on: ubuntu-latest
        permissions:
            contents: read
            packages: write
            # This is used to complete the identity challenge
            # with sigstore/fulcio when running outside of PRs.
            id-token: write

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            # Install the cosign tool except on PR
            # https://github.com/sigstore/cosign-installer
            - name: Install cosign
              if: github.event_name != 'pull_request'
              uses: sigstore/cosign-installer@6e04d228eb30da1757ee4e1dd75a0ec73a653e06 #v3.1.1
              with:
                  cosign-release: 'v2.1.1'

            # Set up BuildKit Docker container builder to be able to build
            # multi-platform images and export cache
            # https://github.com/docker/setup-buildx-action
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

            # Login against a Docker registry except on PR
            # https://github.com/docker/login-action
            - name: Log into registry ${{ env.REGISTRY }} - credentials  ${{ secrets.DOCKER_USERNAME }} ${{ secrets.DOCKER_PASSWORD }}
              if: github.event_name != 'pull_request'
              uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            # Extract metadata (tags, labels) for Docker
            # https://github.com/docker/metadata-action
            - name: Extract Docker metadata
              id: meta
              uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
              with:
                  images: ${{ env.IMAGE_NAME }}

            # Build and push Docker image with Buildx (don't push on PR)
            # https://github.com/docker/build-push-action
            - name: Build and push Docker image
              id: build-and-push
              uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
              with:
                  context: .
                  push: ${{ github.event_name != 'pull_request' }}
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

    deploy:
        needs: build
        environment: livre-restaurant-backend
        runs-on: self-hosted
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
            - name: Pull latest github code
              run: git pull origin main
            - name: check variables ${{ vars }}
              run: echo ${{ vars }}

            - name: Make envfile
              uses: SpicyPizza/create-envfile@v2.0
              with:
                  envkey_NODE_ENV: ${{ vars.NODE_ENV }}
                  envkey_BASE_PATH: ${{ vars.BASE_PATH }}
                  envkey_PORT: ${{ vars.PORT }}
                  envkey_DB_USERNAME: ${{ vars.DB_USERNAME }}
                  envkey_DB_PASSWORD: ${{ vars.DB_PASSWORD }}
                  envkey_DB_NAME: ${{ vars.DB_NAME }}
                  envkey_DB_HOST: ${{ vars.DB_HOST }}
                  envkey_DB_PORT: ${{ vars.DB_PORT }}
                  envkey_NEED_SEED_DATA: ${{ vars.NEED_SEED_DATA }}
                  envkey_JWT_SECRET_ACCESS_TOKEN_KEY: ${{ vars.JWT_SECRET_ACCESS_TOKEN_KEY }}
                  envkey_JWT_SECRET_REFRESH_TOKEN_KEY: ${{ vars.JWT_SECRET_REFRESH_TOKEN_KEY }}
                  envkey_TOKEN_EXPIRED_IN: ${{ vars.TOKEN_EXPIRED_IN }}
                  envkey_REFRESH_TOKEN_EXPIRED_IN: ${{ vars.REFRESH_TOKEN_EXPIRED_IN }}
                  envkey_CORS_WHITE_LIST: ${{ vars.CORS_WHITE_LIST }}
                  envkey_GOOGLE_CLIENT_ID: ${{ vars.GOOGLE_CLIENT_ID }}
                  envkey_GOOGLE_CLIENT_SECRET: ${{ vars.GOOGLE_CLIENT_SECRET }}
                  envkey_AWS_S3_BUCKET: ${{ vars.AWS_S3_BUCKET }}
                  envkey_AWS_REGION: ${{ vars.AWS_REGION }}
                  envkey_AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
                  envkey_AWS_SECRET_ACCESS_KEY: ${{ vars.AWS_SECRET_ACCESS_KEY }}
                  envkey_AWS_S3_DOMAIN: ${{ vars.AWS_S3_DOMAIN }}
                  envkey_CRON_JOB_BOOKING_UPDATE_STATUS: ${{ vars.CRON_JOB_BOOKING_UPDATE_STATUS }}
                  envkey_CRON_JOB_CREATE_REPORT_REVENUE: ${{ vars.CRON_JOB_CREATE_REPORT_REVENUE }}
                  file_name: .env
                  fail_on_empty: false
                  sort_keys: false
            - name: Down old containers
              run: docker compose -f docker-compose.deployment.yml down
            - name: Pull image and run from dockerhub
              run: docker compose -f docker-compose.deployment.yml up
